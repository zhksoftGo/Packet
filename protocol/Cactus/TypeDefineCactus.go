/*=============================================================================
*	Copyright (C) 2006-2020, Zhang Kun(zhk.tiger@gmail.com). All Rights Reserved.
*	Generated by: ProtocolGen 1.80 2020-10-25
=============================================================================*/
package Cactus

//打包解包类
import "github.com/zhksoftGo/Packet"

//整数数组
type vectorInt []int32

func (v *vectorInt) Write(pak *Packet.Packet) {
	l := uint32(len(*v))
	pak.WriteUint32(l)
	for item := range *v {
		pak.WriteInt32((*v)[item])
	}
}

func (v *vectorInt) Read(pak *Packet.Packet) {
	l := pak.ReadUint32()
	var i uint32
	for i = 0; i < l; i++ {
		var t int32
		t = pak.ReadInt32()
		(*v)[len(*v)] = t
	}
}

//Short数组
type vectorShort []int16

func (v *vectorShort) Write(pak *Packet.Packet) {
	l := uint32(len(*v))
	pak.WriteUint32(l)
	for item := range *v {
		pak.WriteInt16((*v)[item])
	}
}

func (v *vectorShort) Read(pak *Packet.Packet) {
	l := pak.ReadUint32()
	var i uint32
	for i = 0; i < l; i++ {
		var t int16
		t = pak.ReadInt16()
		(*v)[len(*v)] = t
	}
}

//int 64数组
type vectorInt64 []int64

func (v *vectorInt64) Write(pak *Packet.Packet) {
	l := uint32(len(*v))
	pak.WriteUint32(l)
	for item := range *v {
		pak.WriteInt64((*v)[item])
	}
}

func (v *vectorInt64) Read(pak *Packet.Packet) {
	l := pak.ReadUint32()
	var i uint32
	for i = 0; i < l; i++ {
		var t int64
		t = pak.ReadInt64()
		(*v)[len(*v)] = t
	}
}

//unsigned int 64数组
type vectorUint64 []uint64

func (v *vectorUint64) Write(pak *Packet.Packet) {
	l := uint32(len(*v))
	pak.WriteUint32(l)
	for item := range *v {
		pak.WriteUint64((*v)[item])
	}
}

func (v *vectorUint64) Read(pak *Packet.Packet) {
	l := pak.ReadUint32()
	var i uint32
	for i = 0; i < l; i++ {
		var t uint64
		t = pak.ReadUint64()
		(*v)[len(*v)] = t
	}
}

//Cactus::String数组
type vectorString []string

func (v *vectorString) Write(pak *Packet.Packet) {
	l := uint32(len(*v))
	pak.WriteUint32(l)
	for item := range *v {
		pak.WriteString((*v)[item])
	}
}

func (v *vectorString) Read(pak *Packet.Packet) {
	l := pak.ReadUint32()
	var i uint32
	for i = 0; i < l; i++ {
		var t string
		t = pak.ReadString()
		(*v)[len(*v)] = t
	}
}

//浮点数组
type vectorFloat []float32

func (v *vectorFloat) Write(pak *Packet.Packet) {
	l := uint32(len(*v))
	pak.WriteUint32(l)
	for item := range *v {
		pak.WriteFloat32((*v)[item])
	}
}

func (v *vectorFloat) Read(pak *Packet.Packet) {
	l := pak.ReadUint32()
	var i uint32
	for i = 0; i < l; i++ {
		var t float32
		t = pak.ReadFloat32()
		(*v)[len(*v)] = t
	}
}

//int-int map
type mapIntInt map[int32]int32

func (v *mapIntInt) Write(pak *Packet.Packet) {
	l := uint32(len(*v))
	pak.WriteUint32(l)
	for key, item := range *v {
		pak.WriteInt32(key)
pak.WriteInt32(item)
	}
}

func (v *mapIntInt) Read(pak *Packet.Packet) {
	l := pak.ReadUint32()
	var i uint32
	for i = 0; i < l; i++ {
		var key int32
		key = pak.ReadInt32()
		var item int32
		item = pak.ReadInt32()
		(*v)[key] = item
	}
}

//int-bool map
type mapIntBool map[int32]bool

func (v *mapIntBool) Write(pak *Packet.Packet) {
	l := uint32(len(*v))
	pak.WriteUint32(l)
	for key, item := range *v {
		pak.WriteInt32(key)
pak.WriteBool(item)
	}
}

func (v *mapIntBool) Read(pak *Packet.Packet) {
	l := pak.ReadUint32()
	var i uint32
	for i = 0; i < l; i++ {
		var key int32
		key = pak.ReadInt32()
		var item bool
		item = pak.ReadBool()
		(*v)[key] = item
	}
}

//String-String map
type mapStringString map[string]string

func (v *mapStringString) Write(pak *Packet.Packet) {
	l := uint32(len(*v))
	pak.WriteUint32(l)
	for key, item := range *v {
		pak.WriteString(key)
pak.WriteString(item)
	}
}

func (v *mapStringString) Read(pak *Packet.Packet) {
	l := pak.ReadUint32()
	var i uint32
	for i = 0; i < l; i++ {
		var key string
		key = pak.ReadString()
		var item string
		item = pak.ReadString()
		(*v)[key] = item
	}
}

//单条消息记录
type SMsgRecordItem struct {
	time int64				//发生时间
	msg Packet.Packet				//去掉消息头(长度+类型)的消息数据
}

func (v *SMsgRecordItem) Write(pak *Packet.Packet) {
	pak.WriteInt64(v.time)
	pak.WritePacket(v.msg)
}

func (v *SMsgRecordItem) Read(pak *Packet.Packet) {
	v.time = pak.ReadInt64()
	v.msg = pak.ReadPacket()
}

//消息记录数组
type vectorMsgRecord []SMsgRecordItem

func (v *vectorMsgRecord) Write(pak *Packet.Packet) {
	l := uint32(len(*v))
	pak.WriteUint32(l)
	for item := range *v {
		(*v)[item].Write(pak)
	}
}

func (v *vectorMsgRecord) Read(pak *Packet.Packet) {
	l := pak.ReadUint32()
	var i uint32
	for i = 0; i < l; i++ {
		var t SMsgRecordItem
		t.Read(pak)
		(*v)[len(*v)] = t
	}
}

